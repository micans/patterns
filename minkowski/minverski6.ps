%!PS-3.0
%%BoundingBox: 90 212 506 630

% NOTE "(.../cilib.inc) run" expanded inline
%!

% This is based on Kees van der Laan's code for circle inversion:
% 230 TUGboat, Volume 31 (2010), No. 3 MAPS 40 (2009)
% Kees van der Laan, Circle Inversions; pp.9â€“65.
% http://tug.org

% The ones that matter have been prefixed kvdl:
%    kvdl_li   (line inversion)
%    kvdl_lsi  (line segment inversion)
% Some changes were made, in particular the logic for arc direction,
% and a decision to base everything on the unit circle centered at 0,0.
% More general code can be based on these using gsave/grestore.


        % point inversion
/pinv {
% x y
%==>
% Ix Iy coordinates of point after inversion in unit circle.
    0 begin
    /y exch def /x exch def 
    1.0 x dup mul y dup mul add div dup
    x mul exch y mul        % Fx Fy
    end
} def
/pinv load 0 2 dict put


        % given two points p q, return their distance
/pqdist {
% u v x y
%==>
% sqrt((u-x)^2 + (v-y)^2)
   3 -1 roll                  % u x y v
   sub exch sub pmagn
} def

        % given a point p, return its magnitude
/pmagn {
% u v
%==>
% sqrt(u^2+v^2)
   dup mul exch dup mul add sqrt
} def


        % rotate a point p over angle phi, return result
/prot
% x y phi: point and angle of rotation (counterclockwise)
%==>
% x y coordinates of point after rotation
{ 0 begin /phi exch def /y exch def /x exch def
  /xaux x phi cos mul y phi sin mul sub def /y x phi sin mul y phi cos mul add def /x xaux def
  x y
  end
} def
/prot load 0 5 dict put


        % midpoint between to points
/pqmid
% p q on stack
%==>
% 0.5p + 0.5q, the midpoint
{  exch
   4 -1 roll add .5 mul
   3 1 roll add .5 mul
}  def


        % given two points on stack defining line, draw circle that is inverse of line. 
/kvdl_li
% x1 y1 x2 y2: the points which determine the line
% mx my r: the centre and radius of the inversion circle
%==>
% mix miy ri: centre and radius of the inverted line
{  0 begin
   /eps 0.0001 def
   /y2 exch def /x2 exch def
   /y1 exch def /x1 exch def
   /angle y1 y2 sub x1 x2 sub atan def
           angle abs 90 sub abs eps abs lt
           angle abs 270 sub abs eps abs lt
           or
   {                                      % special case: vertical line
      x1 0 pinv 0 0 pqmid
      /miy exch def /mix exch def
      /ri mix miy pmagn def
   }{
      angle abs 180 sub abs eps lt
      angle abs 360 sub abs eps lt or
      angle abs eps lt or
      {                          % special case: horizontal line
         0 y1 pinv 0 0 pqmid
         /miy exch def /mix exch def
         /ri mix miy pmagn def
      }{ % general case
         angle 180 gt {/angle angle 180 sub def} if      % reduce to range 0-180
         /angle 90 angle sub def
         x1 y1 angle prot pop /lx exch def
         lx abs eps lt{(Line through origin?) print} if  % warning
         /mix 1 lx div 2 div def /miy 0 def              % center circle
         /ri miy mix pmagn def                           % radius circle
                                 % rotate back and shift
         mix miy angle neg prot
         /miy exch def
         /mix exch def
      } ifelse
   } ifelse
   mix miy ri
   end
} def
/kvdl_li load 0 16 dict put


        % given two points on stack defining line segment, draw circle-inverse of segment. 
/kvdl_lsi
% x1 y1 x2 y2: the points which determine the line
%==>
% path of inverted cirle arc
{  0 begin
   /y2 exch def /x2 exch def /y1 exch def /x1 exch def
   x1 y1 x2 y2 kvdl_li /ri exch def /miy exch def /mix exch def
   x1 y1 pinv /y1 exch def /x1 exch def
           % x1 y1 now the point inversion of x1 y1
   x2 y2 pinv /y2 exch def /x2 exch def
           % x2 y2 now the point inversion of x1 y1
   /phi1 y1 miy sub x1 mix sub atan def
   /phi2 y2 miy sub x2 mix sub atan def
         %(x1, y1)--(0, 0) right from (xm, ym)--(0, 0)?
   /nilnilphi 0 miy sub 0 mix sub atan def

   % nilnilphi is the angle (with positive x axis, origin at (mix, miy)) of the
   % inversion centre relative to the circle centre (mix, miy) derived from the
   % line.
   % Our arc should never pass through nilnilphi as the inversion
   % centre is the limit image of the line at infinity.
   % hence we go from smaller phi to larger phi (this is counterclockwise)
   % unless nilnilphi is contained in that interval.
   % fixme: do this without swap if fewer ops.

   phi2 phi1 lt
   { /phi3 phi1 def /phi1 phi2 def /phi2 phi3 def
   } if
   nilnilphi phi1 lt nilnilphi phi2 gt or
   {x1 y1 moveto newpath mix miy ri phi1 phi2 arc}
   {x2 y2 moveto newpath mix miy ri phi2 phi1 arc} ifelse
   end
} def
/kvdl_lsi load 0 20 dict put



/themap [ [1 0] [0 1] [-1 0] [0 -1] ] def
  % 0 : right
  % 1 : up
  % 2 : left
  % 3 : down

/BB_test 0 def
/type  2 def
/scalef 10.0 def
/nlevel 7 def
/doclip 0 def
/dilation 1.0 def

/lw0 0.0080 def
/lw1 0.0060 def
/lw2 0.0020 def
/lw3 0.0010 def
/lw4 0.00050  def
/lw5 0.00025  def
/lw6 0.00010  def

      %  draw_circle                (stroke|fill) [r g b] [x y] r
/draw_circle {
     exch aload pop moveto currentpoint newpath 3 -1 roll 0 360 arc
     aload pop setrgbcolor
     cvx exec
} def


/bb [ 90 212 506 630 ] def
0.02 setlinewidth
BB_test 1 eq { newpath
      bb 0 get bb 1 get moveto
      bb 0 get bb 3 get lineto
      bb 2 get bb 3 get lineto
      bb 2 get bb 1 get lineto closepath
      stroke
} if

28.3464567 dup scale

/height 29.7039 def
/width 20.9903 def
width 0.5 mul height 0.5 mul translate

scalef dup scale


doclip 1 eq {
  lw0 setlinewidth
  (stroke) [0 0 0] [0 0] 1.0 9 div draw_circle
  (clip)   [0 0 0] [0 0] 1.0 9 div draw_circle
} if

/u  2   sqrt def            % unit
/hu 0.5 sqrt def            % half unit

/start_mink {
  newpath
                          % { x y moveto }
                          % { x 0.0 add y 0.0 add pinv moveto }
  type 1 eq
      { x y moveto }
      { type 2 eq
        { x y pinv moveto }
        { x y pinv moveto }
        ifelse
      }
  ifelse
} def


/inv_mink {
  thepath { 48 sub themap exch get aload pop  % 48 ascii value of '0'
      /xo x def
      /yo y def
                              % dx dy
      u mul exch u mul        % udy udx  
      x add /x exch def       % y updated,
      y add /y exch def       % x updated
  
      type 1 eq
      { x y lineto }
      { type 2 eq
        { xo yo x y kvdl_lsi stroke }
        { x y pinv lineto }
        ifelse
      }
      ifelse
    }
    forall
  % closepath
  type 1 eq { stroke } if
} def

1 nlevel eq {
  lw1 setlinewidth
  /thepath (0123) def
  gsave
  1 1 1 {
    pop
    /x hu -1 mul def
    /y hu -1 mul def
    % (stroke) [ 0 0 0] [ x y ] 0.2 draw_circle
    start_mink
    inv_mink
    90 rotate
  } for
  grestore
} if


2 nlevel le {
  lw2 setlinewidth
  /thepath (030101212323) def
    /x hu -3 mul def                    % [ 2  1 ]
    /y hu -1 mul def                    % [-1  2 ]
    % (stroke) [ 0 0 0] [ x y ] 0.4 draw_circle
    start_mink
    inv_mink
} if


3 nlevel le {
  lw3 setlinewidth
  /thepath (030323030101030101212101212323212323) def
    /x hu  -7 mul def
    /y hu   1 mul def
    % (stroke) [ 0 0 0] [ x y ] 0.6 draw_circle
    start_mink
    inv_mink
} if


4 nlevel le {
  lw4 setlinewidth
  /thepath (030323030323212323030323030101030101030323030101030101212101212101030101212101212323212323212101212323212323) def
    /x hu  -13 mul def
    /y hu    9 mul def
    % 0.8 0.1 0.2 setrgbcolor
    (stroke) [ 0 0 0] [ x y ] 0.8 draw_circle
    start_mink
    inv_mink
} if



5 nlevel le {
   lw5 setlinewidth
   /thepath (030323030323212323030323030323212323212101212323212323030323030323212323030323030101030101030323030101030101030323030323212323030323030101030101030323030101030101212101212101030101212101212101030101030323030101030101212101212101030101212101212323212323212101212323212323212101212101030101212101212323212323212101212323212323) def
    /x hu  -17 mul def
    /y hu  31 mul def
    % 0.8 0.1 0.2 setrgbcolor
    % (stroke) [0 0 0] [0 0] 1.0 9 div draw_circle
    (stroke) [ 0 0 0] [ x y ] 1.0 draw_circle
    start_mink
    inv_mink
} if



6 nlevel le {
  lw6 setlinewidth
  /thepathdef
    /x hu   -3 mul def
    /y hu   79 mul def
    % (stroke) [ 0 0 0] [ x y ] 1.0 draw_circle
    start_mink
    inv_mink
} if



7 nlevel le {
  lw6 setlinewidth
  /thepathdef
    /x hu   73 mul def
    /y hu  161 mul def
    % (stroke) [ 0 0 0] [ x y ] 1.0 draw_circle
    start_mink
    inv_mink
} if

% -3 79

% (stroke) [0 0 0] [0 0] 1.0 draw_circle

showpage


